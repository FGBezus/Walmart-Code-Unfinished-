# -*- coding: utf-8 -*-
"""New Code For Machine Learning (Walmart)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3-2WTogbczNb983drHxDcO4slXvPgaI

My Code
"""

import pandas as pd

import numpy as np

import statsmodels.api as sm

!pip install ISLP

import numpy as np
import statsmodels.api as sm
from statsmodels.formula.api import glm
from statsmodels.genmod.families.links import logit

from ISLP import confusion_table
from ISLP.models import contrast
from sklearn.discriminant_analysis import \
(LinearDiscriminantAnalysis as LDA, QuadraticDiscriminantAnalysis as QDA)
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import numpy as np
from sklearn.linear_model import LinearRegression

from ISLP import load_data
from ISLP.models import (ModelSpec as MS,
summarize)

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Colab Notebooks/WMT.csv'

walmart = pd.read_csv(file_path)

with open(file_path, 'r') as file:
    data = file.read()

walmart.dtypes

# Read the original Walmart data from Google Drive
filepath = '/content/drive/MyDrive/Colab Notebooks/WMT.csv'
df_original = pd.read_csv(file_path)

# Create a separate dataframe containing the first few rows of the original data
walmart_head = df_original.head()
display(df_original.head(6118))

# Print the separate walmart.head dataframe
print(walmart_head)

walmart_head.head(n=6118)

"""Makes datatype Month/Year"""

walmart['Month/Year'] = walmart['Date'].astype('datetime64[ns]')

walmart

len(walmart)

walmart.dtypes

#walmart['Date'] = walmart['Date'].dt.to_period('M')
walmart['Month/Year'] = walmart['Month/Year'].dt.to_period('M')

#create columns for month
#df['month'] = df['dates'].dt.strftime('%b')

walmart['Month'] = walmart['Month/Year'].dt.strftime('%b')
walmart['Year'] = walmart['Month/Year'].dt.strftime('%Y')

walmart

# Let's group by month

# Convert 'Month' column to categorical data
walmart['Month'] = pd.Categorical(walmart['Month'])

# One-hot encode the 'Month' column
x = pd.get_dummies(walmart[['Month', 'Year']], columns=['Month'])

# Checking if it works
model = LinearRegression()

missing_values_x = x.isnull().sum()
missing_values_y = y.isnull().sum()

if missing_values_x.any() or missing_values_y.any():
    # Drop rows with missing values
    x = x.dropna()
    y = y.dropna()

features = walmart[["Month", "Year"]]
target = walmart["Volume"]

# Create a new column called 'Month/Year' by concatenating the 'Month' and 'Year' columns
walmart['Month/Year'] = walmart['Month'].astype(str) + '/' + walmart['Year'].astype(str)

# Convert the 'Month/Year' column to a column of timestamps
walmart['Month/Year'] = pd.to_datetime(walmart['Month/Year'])

import numpy as np

one_dimensional_array_1 = np.array([1, 2, 3])
one_dimensional_array_2 = np.array([4, 5, 6])

two_dimensional_array = np.stack((one_dimensional_array_1, one_dimensional_array_2), axis=1)

# Convert 'Month/Year' column to strings
walmart['Month/Year'] = walmart['Month/Year'].astype(str)

# Convert 'Month/Year' column to timestamps
walmart['Month/Year'] = pd.to_datetime(walmart['Month/Year'])

# Ensure that "Month/Year" and "Volumes" have the same number of samples
walmart = walmart.dropna()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(walmart["Month/Year"], walmart["Volume"], test_size=0.2)

# Fit the linear regression model
model = LinearRegression()
model.fit(X_train.to_numpy().reshape(-1, 1), y_train)

# Ensure that "Month/Year" and "Volumes" have the same number of samples
walmart = walmart.dropna()

# Create the x and y variables
x = walmart["Month/Year"]
y = walmart["Volume"]

# Check if 'Month/Year' column exists in the DataFrame
if 'Month/Year' not in df.columns:
    print("The 'Month/Year' column does not exist in the DataFrame.")

df['Year'] = df['Year'].astype(int)
df['Month/Year'] = pd.to_datetime(df['Month'].astype(str) + '-' + df['Year'].astype(str))

x = df[['Year', 'Month']]
y = df['Volume']
model = LinearRegression()
model.fit(x, y)

if 'Month/Year' in df.columns:
    df['Year'] = df['Month/Year'].dt.year
    df['Month'] = df['Month/Year'].dt.month
else:
    print("The 'Month/Year' column does not exist in the DataFrame.")

if 'Month/Year' not in df.columns:
    df['Month/Year'] = pd.to_datetime(df['Month'].astype(str) + '-' + df['Year'].astype(str))
#As I recall this set of code is meant to split Month/Year
df['Year'] = df['Month/Year'].dt.year
df['Month'] = df['Month/Year'].dt.month

# Create the 'Month/Year' column

# Extract year and month from 'Month/Year'
df['Year'] = df['Month/Year'].dt.year
df['Month'] = df['Month/Year'].dt.month

# Drop the 'Month/Year' column
df = df.drop('Month/Year', axis=1)

# Use the 'Year' and 'Month' columns as input features
x = df[['Year', 'Month']]
y = df['Volume']

# Fit the linear regression model
model = LinearRegression()
model.fit(x, y)

df = walmart.groupby(['Month/Year']).agg('Volume').mean().reset_index()

model = LinearRegression()
model.fit(x, y)

walmart['Month'] = walmart['Month'].astype('category')
pd.get_dummies(walmart)

df1 = df.groupby("Year").mean().reset_index()

#df1.pivot_table(columns="Year", values = "Volume")
# create the model linear

# @title Stock Price

from matplotlib import pyplot as plt
df['Volume'].plot(kind='line', figsize=(8, 4), title='Stock Prices')
plt.gca().spines[['top', 'right']].set_visible(False)

len(walmart)

!pip install seaborn
import seaborn as sns
sns.lineplot(df, x="Year", y="Volume")

walmart = walmart.drop_duplicates(subset='Date', keep='last')
#does not do anything

# Convert the Date column to a string
walmart['Date'] = walmart['Date'].astype(str)

# Format the Date column as month and year
walmart['Date'] = walmart['Date'].apply(lambda x: x[:7])

# 1. Calculate the total volume for each month
monthly_volumes = df_original.groupby('Date')['Volume'].sum()

# 2. Extract the first 5 rows of the original data
walmart_head = df_original.head()

# 3. Merge the monthly volumes with the walmart.head dataframe
walmart_head = walmart_head.merge(monthly_volumes, on='Date', how='left')

# 4. Rename the merged column to 'total_volume'
walmart_head.rename(columns={0: 'total_volume'}, inplace=True)

# 5. Print the modified walmart.head dataframe
print(walmart_head)

walmart_head = walmart_head.merge(walmart, on='Date', how='left')
walmart_head.rename(columns={'volume_y': 'Volume'}, inplace=True)
grouped_walmart = walmart.groupby('Date')['Volume'].sum()
walmart_head = walmart_head.merge(grouped_walmart, on='Date', how='left')
walmart_head.rename(columns={'volume_y': 'total_volume'}, inplace=True)

print(walmart_head)

walmart.head(n=6118)

# prompt: Using dataframe walmart: volume and adj close

import pandas as pd

# Create a scatter plot of volume vs. adjusted close price
pd.plotting.scatter_matrix(walmart[['Volume', 'Close']])